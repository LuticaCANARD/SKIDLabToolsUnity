#if false
// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace LuticaSKIDBinder
{
    internal static unsafe partial class LuticaSKIDBinderToCSharp
    {
        const string __DllName = "skid_rust_backend";



        [DllImport(__DllName, EntryPoint = "skid_image_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDImage* skid_image_new(nuint width, nuint height);

        [DllImport(__DllName, EntryPoint = "skid_image_get_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDSizeVector2 skid_image_get_size(SKIDImage* handle);

        [DllImport(__DllName, EntryPoint = "skid_color_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDColor skid_color_new(float r, float g, float b, float a);

        [DllImport(__DllName, EntryPoint = "skid_color_to_f32_array", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void skid_color_to_f32_array(SKIDColor color, float* out_array);

        [DllImport(__DllName, EntryPoint = "skid_color_from_f32_array", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDColor skid_color_from_f32_array(float* color_val);

        [DllImport(__DllName, EntryPoint = "skid_color_add", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDColor skid_color_add(SKIDColor c1, SKIDColor c2);

        [DllImport(__DllName, EntryPoint = "skid_color_sub", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDColor skid_color_sub(SKIDColor c1, SKIDColor c2);

        [DllImport(__DllName, EntryPoint = "skid_color_mul_color", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDColor skid_color_mul_color(SKIDColor c1, SKIDColor c2);

        [DllImport(__DllName, EntryPoint = "skid_color_div_color", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDColor skid_color_div_color(SKIDColor c1, SKIDColor c2);

        [DllImport(__DllName, EntryPoint = "skid_color_mul_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDColor skid_color_mul_f32(SKIDColor color, float scalar);

        [DllImport(__DllName, EntryPoint = "skid_vector3_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDVector3 skid_vector3_new(float x, float y, float z);

        [DllImport(__DllName, EntryPoint = "skid_vector3_dot", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float skid_vector3_dot(SKIDVector3 v1, SKIDVector3 v2);

        [DllImport(__DllName, EntryPoint = "skid_vector3_cross", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDVector3 skid_vector3_cross(SKIDVector3 v1, SKIDVector3 v2);

        [DllImport(__DllName, EntryPoint = "skid_vector3_add", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDVector3 skid_vector3_add(SKIDVector3 v1, SKIDVector3 v2);

        [DllImport(__DllName, EntryPoint = "skid_vector3_sub", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDVector3 skid_vector3_sub(SKIDVector3 v1, SKIDVector3 v2);

        [DllImport(__DllName, EntryPoint = "skid_vector3_mul_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDVector3 skid_vector3_mul_f32(SKIDVector3 v, float scalar);

        [DllImport(__DllName, EntryPoint = "skid_vector3_div_f32", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDVector3 skid_vector3_div_f32(SKIDVector3 v, float scalar);

        [DllImport(__DllName, EntryPoint = "skid_vector3_neg", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDVector3 skid_vector3_neg(SKIDVector3 v);

        [DllImport(__DllName, EntryPoint = "skid_generate_normal_map", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SKIDImage skid_generate_normal_map(SKIDImage input_image, NormalMapOptions options);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct SKIDColor
    {
        public float r;
        public float g;
        public float b;
        public float a;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct SKIDSizeVector2
    {
        public nuint width;
        public nuint height;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct SKIDImage
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct SKIDVector3
    {
        public float x;
        public float y;
        public float z;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct CalcDevice
    {
        public uint device_id;
        public String device_name;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct NormalMapOptions
    {
        public float x_factor;
        public float y_factor;
        [MarshalAs(UnmanagedType.U1)] public bool make_by_gpu;
        public CalcDevice gpu_option;
    }



}
#endif